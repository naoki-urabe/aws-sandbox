AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking: false) [created and managed by eksctl]'
Parameters:
  ClusterStack:
    Type: String
    Default: eksctl-test-base-cluster
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
      IRA: rolesanywhere.amazonaws.com
      SSM: ssm.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso:
      EC2: ec2.c2s.ic.gov
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso-b:
      EC2: ec2.sc2s.sgov.gov
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso-e:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-iso-f:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
      IRA: rolesanywhere.amazonaws.com
      SSM: ssm.amazonaws.com
Resources:
  AccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: test-base
      PrincipalArn: !GetAtt NodeInstanceRole.Arn
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/AccessEntry
      Type: EC2_LINUX
  EgressInterCluster:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow control plane to communicate with worker nodes in group ng-1 (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue eksctl-test-base-cluster::SecurityGroup
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow control plane to communicate with worker nodes in group ng-1 (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue eksctl-test-base-cluster::SecurityGroup
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow control plane to receive API requests from worker nodes in group ng-1
      FromPort: 443
      GroupId: !ImportValue eksctl-test-base-cluster::SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateName: !Sub ${AWS::StackName}
        Version: !GetAtt NodeGroupLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: test-base-ng-1-Node
        - Key: kubernetes.io/cluster/test-base
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier:
        - !Select [0, !Split [",", Fn::ImportValue: { Fn::Sub: "${ClusterStack}::SubnetsPublic" }]]
        - !Select [1, !Split [",", Fn::ImportValue: { Fn::Sub: "${ClusterStack}::SubnetsPublic" }]]
        - !Select [2, !Split [",", Fn::ImportValue: { Fn::Sub: "${ClusterStack}::SubnetsPublic" }]]
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: ami-0ebe1716bc48bf5dd
        InstanceType: m5.large
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue eksctl-test-base-cluster::SharedNodeSecurityGroup
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: test-base-ng-1-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: test-base-ng-1-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: test-base-ng-1-Node
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            /etc/eks/bootstrap.sh test-base
      LaunchTemplateName: !Sub ${AWS::StackName}
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref AWS::Partition
                  - EC2
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
      Path: /
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/NodeInstanceRole
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodes in group ng-1
      SecurityGroupIngress:
        - Description: '[IngressInterCluster] Allow worker nodes in group ng-1 to communicate with control plane (kubelet and workload TCP ports)'
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue eksctl-test-base-cluster::SecurityGroup
          ToPort: 65535
        - Description: '[IngressInterClusterAPI] Allow worker nodes in group ng-1 to communicate with control plane (workloads using HTTPS port, commonly used with extension API servers)'
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue eksctl-test-base-cluster::SecurityGroup
          ToPort: 443
      Tags:
        - Key: kubernetes.io/cluster/test-base
          Value: owned
        - Key: Name
          Value: !Sub ${AWS::StackName}/SG
      VpcId: !ImportValue eksctl-test-base-cluster::VPC
  VPCCNI:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      AddonVersion: v1.19.6-eksbuild.1
      ClusterName: test-base
      ResolveConflicts: OVERWRITE
  EBS:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: aws-ebs-csi-driver
      ClusterName: test-base
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt NodeInstanceRole.Arn
  KubeProxy:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: kube-proxy
      ClusterName: test-base
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt NodeInstanceRole.Arn
  CoreDNS:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: coredns
      ClusterName: test-base
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt NodeInstanceRole.Arn
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt NodeInstanceProfile.Arn
    Export:
      Name: !Sub ${AWS::StackName}::InstanceProfileARN
  InstanceRoleARN:
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}::InstanceRoleARN
  NodeGroupUsesAccessEntry:
    Value: true